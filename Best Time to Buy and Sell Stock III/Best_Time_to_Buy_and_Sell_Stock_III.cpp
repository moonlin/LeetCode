/****************************Say you have an array for which the ith element is the price of a given stock on day i.Design an algorithm to find the maximum profit. You may complete at most two transactions.Note:You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).****************************/#include <iostream>#include <vector>#include <string>#include <fstream>#include <queue>#include <map>using namespace std;typedef unsigned int uint;class Solution {public:	int maxProfit(vector<int> &prices) 	{		return dp(prices);	}	int dp(const vector<int>& prices) 	{		if (prices.empty()) return 0;		int max = 0;		int lowest = prices[0];		vector<int> profit;		profit.push_back(0);		for (uint i = 1; i < prices.size()-1; ++i) {			max = std::max(max, prices[i]-lowest);			profit.push_back(max);			lowest = std::min(lowest, prices[i]);		}		int gmax = 0;		int largest = prices[prices.size()-1];		max = 0;		for (int i = prices.size()-2; i >= 0; --i) {			max = std::max(max, largest-prices[i]);			largest = std::max(largest, prices[i]);			gmax = std::max(gmax, max+profit[i]);		}		return gmax;	}};int main(){	int a[] = {6,1,3,2,4,7};	vector<int> prices(a, a+sizeof(a)/sizeof(a[0]));	Solution solve;	int ret = solve.maxProfit(prices);	std::cout <<"ret == " <<ret <<'\n';	getchar();	return 0;}