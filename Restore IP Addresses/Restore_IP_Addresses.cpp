/**********************************************************************************/#include <vector>#include <string>#include <queue>#include <map>#include <stack>typedef unsigned int uint;class Solution {public:	std::vector<std::string> restoreIpAddresses(std::string& str)	{		ips.clear();		std::vector<std::string> ip;		this->restoreIpAddresses_Impl(str, 0, ip);		return ips;	}		void restoreIpAddresses_Impl(std::string& str, int pos, std::vector<std::string>& ip)	{		if (ip.size() > 4) return;		if (pos >= str.size() && ip.size() == 4) {			std::string oneIp = ip[0] + '.' + ip[1] + '.' + ip[2] + '.' +ip[3];			ips.push_back(oneIp);			return ;		}		for (int i = pos+1, j = 0; j < 3 && i <= str.size(); ++i, ++j) {			if (checkValidIp(str, pos, i, ip)) {				ip.push_back(str.substr(pos, i-pos));				restoreIpAddresses_Impl(str, i, ip);				ip.pop_back();			}		}	}	bool checkValidIp(const std::string& str, int i, int j, std::vector<std::string>& ip)	{		if (j - i > 3 || i >= j) return false;		if (str[i] == '0' && i+1 < j) return false;		if ((str.size()-j)/3 + ip.size() + 1 > 4) return false;		int sub = 0;		for (int k = i; k < j; ++k) {			sub = sub*10 + str[k]-'0';		}		if (sub > 255 || sub < 0) return false;		return true;	}	std::vector<std::string> ips;};int main(){		std::string s ("101023");	Solution solve;	std::vector<std::string> ret = solve.restoreIpAddresses(s);	getchar();	return 0;}