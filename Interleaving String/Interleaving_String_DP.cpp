/**************************************** Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.For example,Given:s1 = "aabcc",s2 = "dbbca",When s3 = "aadbbcbcac", return true.When s3 = "aadbbbaccc", return false.****************************************/#include <vector>#include <string>#include <queue>#include <map>#include <stack>typedef unsigned int uint;class Solution {public:    bool isInterleave(std::string s1, std::string s2, std::string s3)	{		return this->isInterleave_dp(s1, s2, s3);	}	bool isInterleave_dp(std::string& s1, std::string& s2, std::string& s3)	{		if (s1.size() + s2.size() != s3.size()) return false;		std::vector<std::vector<bool>> matrix				(s1.size()+1, std::vector<bool> (s2.size()+1, false));		matrix[0][0] = true;		for (uint i = 1; i < s1.size()+1; ++i) {			if (s1[i-1] == s3[i-1]) {				matrix[i][0] = true;			} else {				break;			}		}				for (uint j = 1; j < s2.size()+1; ++j) {			if (s2[j-1] == s3[j-1]) {				matrix[0][j] = true;			} else {				break;			}		}		for (uint i = 1; i < s1.size()+1; ++i) {			for (uint j = 1; j < s2.size()+1; ++j) {				char cc1 = s1[i-1];				char cc2 = s2[j-1];				char cc3 = s3[i+j-1];				if (cc1 != cc3 && cc2 != cc3) matrix[i][j] = false;				else if (cc1 == cc3 && cc2 != cc3) matrix[i][j] = matrix[i-1][j];				else if (cc1 != cc3 && cc2 == cc3) matrix[i][j] = matrix[i][j-1];				else if (cc1 == cc3 && cc2 == cc3) {					matrix[i][j] = matrix[i][j-1] | matrix[i-1][j];				}			}		}		return matrix[s1.size()][s2.size()];	}	};int main(){		Solution solve;	std::string s1 ("aa");	std::string s2 ("ab");	std::string s3 ("aaba");	bool ret = solve.isInterleave(s1, s2, s3);	getchar();	return 0;}