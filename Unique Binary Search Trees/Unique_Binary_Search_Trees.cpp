/***********************************************************************************************Given n, how many structurally unique BST's (binary search trees) that store values 1...n?For example,Given n = 3, there are a total of 5 unique BST's.   1         3     3      2      1    \       /     /      / \      \     3     2     1      1   3      2    /     /       \                 \   2     1         2                 3***********************************************************************************************/class Solution {public:    int numTrees(int n)	{		std::vector<int> treeVec;		treeVec.resize(n);		return mergeTree(treeVec, 0, treeVec.size()-1);	}		int mergeTree(const std::vector<int>& treeVec, int i, int j) 	{		if (i > j) return 0;		if (i == j) return 1;		int num = 0;		for (int k = i; k <= j; ++k) {			int num1 = mergeTree(treeVec, i, k-1);			int num2 = mergeTree(treeVec, k+1, j);			num += num1? num1*(num2? num2: 1): 1*num2;		}		return num;	}};